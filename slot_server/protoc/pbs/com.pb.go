// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.29.3
// source: com.proto

package pbs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 通用code
type Code int32

const (
	Code_Unknown                     Code = 0    //未知
	Code_WebOK                       Code = 1    // Success
	Code_OK                          Code = 200  // Success
	Code_NotLoggedIn                 Code = 1000 // 未登录
	Code_ParameterIllegal            Code = 1001 // 参数不合法
	Code_UnauthorizedUserID          Code = 1002 // 非法的用户 ID
	Code_Unauthorized                Code = 1003 // 未授权
	Code_ServerError                 Code = 1004 // 系统错误
	Code_NotData                     Code = 1005 // 没有数据
	Code_ModelAddError               Code = 1006 // 添加错误
	Code_ModelDeleteError            Code = 1007 // 删除错误
	Code_ModelStoreError             Code = 1008 // 存储错误
	Code_OperationFailure            Code = 1009 // 操作失败
	Code_RoutingNotExist             Code = 1010 // 路由不存在
	Code_RepetitiveOperation         Code = 1011 // 重复操作
	Code_SysBusy                     Code = 1012 // 系统繁忙 稍后在试
	Code_Maintenance                 Code = 1013 // 维护阶段 稍后再来
	Code_UserScoreNotEnough          Code = 1014 // 用户积分不够
	Code_SelectRoomProhibit          Code = 1015 // 房间被占用
	Code_BetLow                      Code = 1017 // 押注不正确
	Code_NoReSelectRoom              Code = 1018 // 已经选择过房间
	Code_ReLogin                     Code = 1020
	Code_LoginFirstProtectionDesc    Code = 1021 //首刀保护的档位 不让重复进入文案
	Code_TokenExpiration             Code = 1022
	Code_ServerRedisError            Code = 1023
	Code_GetScoreErr                 Code = 1024
	Code_DuplicateRequests           Code = 1025
	Code_GetRoomConfigErr            Code = 1026
	Code_GetCurrTurnErr              Code = 1027
	Code_GetTurnDetail               Code = 1028
	Code_ProhibitSelectRoom          Code = 1029 // 系统强制匹配时间
	Code_EnterGameIng                Code = 1030 //
	Code_NotScoreConsume             Code = 1031 //
	Code_RepetitionConfirm           Code = 1032
	Code_DBErr                       Code = 1033 // 没有数据
	Code_NoTFishRod                  Code = 1034 //
	Code_LCoin                       Code = 1035 // 里昂尼斯币不足
	Code_SCoin                       Code = 1036 // 国王积分不足
	Code_CoinTypeNotMatchFishRodType Code = 1037 // 币类型和鱼竿类型不匹配
	Code_NotSupportCoin              Code = 1038 // 不支持的币种
	Code_ParameterNot                Code = 1039 // 参数有误
	Code_FishRodNumNotEnough         Code = 1040 // 耐久度不够,请购买
	Code_RepetitionFunc              Code = 1041 // 重复操作
	Code_SignInEd                    Code = 1042 //
	Code_GetDBDataErr                Code = 1043 // 获取数据库数据有误
	Code_FishSellTypeErr             Code = 1044 // 此类型鱼,不能出售
	Code_UserKnapsackDataEmpty       Code = 1045 // 背包数据不足
	Code_UserKnapsackCapacityLimit   Code = 1046 // 容量限制达到最大限制
	Code_UserKnapsackStackUp         Code = 1047 // 背包叠放达到最大限制
	Code_RpcCallRespErr              Code = 1048 // 用rpc调用远程服务器错误
	Code_RpcCallRespDataErr          Code = 1049 // 用rpc调用远程服务器返回数据有误
	Code_InvitesNumEnough            Code = 1050 // 邀请的用户数不够3人
	Code_DbAddUserRatErr             Code = 1051 // 添加矿工失败
	Code_RoomLevelNotEnough          Code = 1052 // 矿洞等级不够 请升级矿洞
	Code_ProtocNumberError           Code = 1053 // 协议号错误
	Code_DataCompileError            Code = 1054 // 数据编译错误
	Code_GetDataFromDbErr            Code = 1055 // 获取DB数据错误
	Code_AddDataFromDbErr            Code = 1056 // 添加数据错误
	Code_RegisterTimeErr             Code = 1057 // 挖矿游戏上线之前已经注册
	Code_KingCoinNotEnough           Code = 1058 // 没有足够金矿石
	Code_UnauthorizedUserToken       Code = 1059 // 非法的用户token
	Code_HaveBeInviteUser            Code = 1060 // 已经填写过邀请码
	Code_InviteUserUnreal            Code = 1061 // 邀请用户不存在
	Code_NotAuthentication           Code = 1062 // 没有实名认证
	Code_SellOreNumNot0              Code = 1063
	Code_PrevLoginTimeTimeErr        Code = 1064 //回归时间不在1个月内
	Code_NotInviteYourself           Code = 1065
	Code_ExchangeOreCoinErr          Code = 1066 // 请输入正确的金矿数量
	Code_BuyRatNumErr                Code = 1067 // 请输入正确的矿工数量
	Code_BuyRatTimeLimit             Code = 1083 //  敬请期待 购买矿工的限制
	Code_InviteGainRatLimit          Code = 1084 //  新用户需要购买一次矿工才能邀请成功
	Code_CoinExchangeLimit           Code = 1087
	Code_CoinExchangePerKing         Code = 1088 //  每天积分达到限制
	Code_CoinExchangePerOre          Code = 1089 //  每天矿石达到限制
	Code_CoinBuySellLimit            Code = 1091 // 当天买卖总量限制
	Code_CoinBuySellPerKing          Code = 1092 //  每天买卖积分达到限制
	Code_CoinBuySellPerOre           Code = 1093 //  每天买卖矿石达到限制
	Code_NOtOrder                    Code = 1095 //  订单不存在
	Code_NOtOrderDone                Code = 1096 //  订单交易完成
	Code_OreOrderStateDown           Code = 1097 //  上下架间隔一天,明天再来
	Code_ServerTaskIng               Code = 1099 //  后台有任务在执行中 加入mysql执行队列，脚本执行
	Code_CrazyLimitAutoBet           Code = 1111 //boss狂暴阶段 不让自动下注
	Code_NotCrazyStageBet            Code = 1112 //非狂暴阶段,不能一键召唤
	Code_GameNotStart                Code = 1113 //游戏没开始
	Code_HaveCallSoldiers            Code = 1114 //您已经召唤小兵,不能重复召唤
	Code_AlreadySetIsAuto            Code = 1115 //当前期 当前层 已经设置过是否自动
	Code_NotAutoUser                 Code = 1116 //不是自动用户
	Code_NotContinue5                Code = 1138 //不是自动用户
)

// Enum value maps for Code.
var (
	Code_name = map[int32]string{
		0:    "Unknown",
		1:    "WebOK",
		200:  "OK",
		1000: "NotLoggedIn",
		1001: "ParameterIllegal",
		1002: "UnauthorizedUserID",
		1003: "Unauthorized",
		1004: "ServerError",
		1005: "NotData",
		1006: "ModelAddError",
		1007: "ModelDeleteError",
		1008: "ModelStoreError",
		1009: "OperationFailure",
		1010: "RoutingNotExist",
		1011: "RepetitiveOperation",
		1012: "SysBusy",
		1013: "Maintenance",
		1014: "UserScoreNotEnough",
		1015: "SelectRoomProhibit",
		1017: "BetLow",
		1018: "NoReSelectRoom",
		1020: "ReLogin",
		1021: "LoginFirstProtectionDesc",
		1022: "TokenExpiration",
		1023: "ServerRedisError",
		1024: "GetScoreErr",
		1025: "DuplicateRequests",
		1026: "GetRoomConfigErr",
		1027: "GetCurrTurnErr",
		1028: "GetTurnDetail",
		1029: "ProhibitSelectRoom",
		1030: "EnterGameIng",
		1031: "NotScoreConsume",
		1032: "RepetitionConfirm",
		1033: "DBErr",
		1034: "NoTFishRod",
		1035: "LCoin",
		1036: "SCoin",
		1037: "CoinTypeNotMatchFishRodType",
		1038: "NotSupportCoin",
		1039: "ParameterNot",
		1040: "FishRodNumNotEnough",
		1041: "RepetitionFunc",
		1042: "SignInEd",
		1043: "GetDBDataErr",
		1044: "FishSellTypeErr",
		1045: "UserKnapsackDataEmpty",
		1046: "UserKnapsackCapacityLimit",
		1047: "UserKnapsackStackUp",
		1048: "RpcCallRespErr",
		1049: "RpcCallRespDataErr",
		1050: "InvitesNumEnough",
		1051: "DbAddUserRatErr",
		1052: "RoomLevelNotEnough",
		1053: "ProtocNumberError",
		1054: "DataCompileError",
		1055: "GetDataFromDbErr",
		1056: "AddDataFromDbErr",
		1057: "RegisterTimeErr",
		1058: "KingCoinNotEnough",
		1059: "UnauthorizedUserToken",
		1060: "HaveBeInviteUser",
		1061: "InviteUserUnreal",
		1062: "NotAuthentication",
		1063: "SellOreNumNot0",
		1064: "PrevLoginTimeTimeErr",
		1065: "NotInviteYourself",
		1066: "ExchangeOreCoinErr",
		1067: "BuyRatNumErr",
		1083: "BuyRatTimeLimit",
		1084: "InviteGainRatLimit",
		1087: "CoinExchangeLimit",
		1088: "CoinExchangePerKing",
		1089: "CoinExchangePerOre",
		1091: "CoinBuySellLimit",
		1092: "CoinBuySellPerKing",
		1093: "CoinBuySellPerOre",
		1095: "NOtOrder",
		1096: "NOtOrderDone",
		1097: "OreOrderStateDown",
		1099: "ServerTaskIng",
		1111: "CrazyLimitAutoBet",
		1112: "NotCrazyStageBet",
		1113: "GameNotStart",
		1114: "HaveCallSoldiers",
		1115: "AlreadySetIsAuto",
		1116: "NotAutoUser",
		1138: "NotContinue5",
	}
	Code_value = map[string]int32{
		"Unknown":                     0,
		"WebOK":                       1,
		"OK":                          200,
		"NotLoggedIn":                 1000,
		"ParameterIllegal":            1001,
		"UnauthorizedUserID":          1002,
		"Unauthorized":                1003,
		"ServerError":                 1004,
		"NotData":                     1005,
		"ModelAddError":               1006,
		"ModelDeleteError":            1007,
		"ModelStoreError":             1008,
		"OperationFailure":            1009,
		"RoutingNotExist":             1010,
		"RepetitiveOperation":         1011,
		"SysBusy":                     1012,
		"Maintenance":                 1013,
		"UserScoreNotEnough":          1014,
		"SelectRoomProhibit":          1015,
		"BetLow":                      1017,
		"NoReSelectRoom":              1018,
		"ReLogin":                     1020,
		"LoginFirstProtectionDesc":    1021,
		"TokenExpiration":             1022,
		"ServerRedisError":            1023,
		"GetScoreErr":                 1024,
		"DuplicateRequests":           1025,
		"GetRoomConfigErr":            1026,
		"GetCurrTurnErr":              1027,
		"GetTurnDetail":               1028,
		"ProhibitSelectRoom":          1029,
		"EnterGameIng":                1030,
		"NotScoreConsume":             1031,
		"RepetitionConfirm":           1032,
		"DBErr":                       1033,
		"NoTFishRod":                  1034,
		"LCoin":                       1035,
		"SCoin":                       1036,
		"CoinTypeNotMatchFishRodType": 1037,
		"NotSupportCoin":              1038,
		"ParameterNot":                1039,
		"FishRodNumNotEnough":         1040,
		"RepetitionFunc":              1041,
		"SignInEd":                    1042,
		"GetDBDataErr":                1043,
		"FishSellTypeErr":             1044,
		"UserKnapsackDataEmpty":       1045,
		"UserKnapsackCapacityLimit":   1046,
		"UserKnapsackStackUp":         1047,
		"RpcCallRespErr":              1048,
		"RpcCallRespDataErr":          1049,
		"InvitesNumEnough":            1050,
		"DbAddUserRatErr":             1051,
		"RoomLevelNotEnough":          1052,
		"ProtocNumberError":           1053,
		"DataCompileError":            1054,
		"GetDataFromDbErr":            1055,
		"AddDataFromDbErr":            1056,
		"RegisterTimeErr":             1057,
		"KingCoinNotEnough":           1058,
		"UnauthorizedUserToken":       1059,
		"HaveBeInviteUser":            1060,
		"InviteUserUnreal":            1061,
		"NotAuthentication":           1062,
		"SellOreNumNot0":              1063,
		"PrevLoginTimeTimeErr":        1064,
		"NotInviteYourself":           1065,
		"ExchangeOreCoinErr":          1066,
		"BuyRatNumErr":                1067,
		"BuyRatTimeLimit":             1083,
		"InviteGainRatLimit":          1084,
		"CoinExchangeLimit":           1087,
		"CoinExchangePerKing":         1088,
		"CoinExchangePerOre":          1089,
		"CoinBuySellLimit":            1091,
		"CoinBuySellPerKing":          1092,
		"CoinBuySellPerOre":           1093,
		"NOtOrder":                    1095,
		"NOtOrderDone":                1096,
		"OreOrderStateDown":           1097,
		"ServerTaskIng":               1099,
		"CrazyLimitAutoBet":           1111,
		"NotCrazyStageBet":            1112,
		"GameNotStart":                1113,
		"HaveCallSoldiers":            1114,
		"AlreadySetIsAuto":            1115,
		"NotAutoUser":                 1116,
		"NotContinue5":                1138,
	}
)

func (x Code) Enum() *Code {
	p := new(Code)
	*p = x
	return p
}

func (x Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Code) Descriptor() protoreflect.EnumDescriptor {
	return file_com_proto_enumTypes[0].Descriptor()
}

func (Code) Type() protoreflect.EnumType {
	return &file_com_proto_enumTypes[0]
}

func (x Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Code.Descriptor instead.
func (Code) EnumDescriptor() ([]byte, []int) {
	return file_com_proto_rawDescGZIP(), []int{0}
}

// 协议号码
type ProtocNum int32

const (
	ProtocNum_RPN ProtocNum = 0
)

// Enum value maps for ProtocNum.
var (
	ProtocNum_name = map[int32]string{
		0: "RPN",
	}
	ProtocNum_value = map[string]int32{
		"RPN": 0,
	}
)

func (x ProtocNum) Enum() *ProtocNum {
	p := new(ProtocNum)
	*p = x
	return p
}

func (x ProtocNum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocNum) Descriptor() protoreflect.EnumDescriptor {
	return file_com_proto_enumTypes[1].Descriptor()
}

func (ProtocNum) Type() protoreflect.EnumType {
	return &file_com_proto_enumTypes[1]
}

func (x ProtocNum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtocNum.Descriptor instead.
func (ProtocNum) EnumDescriptor() ([]byte, []int) {
	return file_com_proto_rawDescGZIP(), []int{1}
}

// ==== 新版公共协议
// 公共请求头
type ReqHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      int32  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`          //唯一码
	Token    string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`       //token信息，登录时可留空
	Platform string `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"` //平台名称
}

func (x *ReqHead) Reset() {
	*x = ReqHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqHead) ProtoMessage() {}

func (x *ReqHead) ProtoReflect() protoreflect.Message {
	mi := &file_com_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqHead.ProtoReflect.Descriptor instead.
func (*ReqHead) Descriptor() ([]byte, []int) {
	return file_com_proto_rawDescGZIP(), []int{0}
}

func (x *ReqHead) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ReqHead) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ReqHead) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

// 公共响应头
type AckHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid     int32  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                    // 用户id
	Code    Code   `protobuf:"varint,2,opt,name=code,proto3,enum=common.Code" json:"code,omitempty"` // 状态码 只有1为成功 其他均视为失败
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`             // 消息
}

func (x *AckHead) Reset() {
	*x = AckHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckHead) ProtoMessage() {}

func (x *AckHead) ProtoReflect() protoreflect.Message {
	mi := &file_com_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckHead.ProtoReflect.Descriptor instead.
func (*AckHead) Descriptor() ([]byte, []int) {
	return file_com_proto_rawDescGZIP(), []int{1}
}

func (x *AckHead) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AckHead) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_Unknown
}

func (x *AckHead) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 通用协议交换方式
type NetMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqHead   *ReqHead `protobuf:"bytes,1,opt,name=req_head,json=reqHead,proto3" json:"req_head,omitempty"`       // 返回统一协议
	AckHead   *AckHead `protobuf:"bytes,2,opt,name=ack_head,json=ackHead,proto3" json:"ack_head,omitempty"`       // 返回统一协议
	ServiceId string   `protobuf:"bytes,3,opt,name=Service_id,json=ServiceId,proto3" json:"Service_id,omitempty"` //服务号
	MsgId     int32    `protobuf:"varint,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`            //协议号
	Content   []byte   `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`                      //协议内容
}

func (x *NetMessage) Reset() {
	*x = NetMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetMessage) ProtoMessage() {}

func (x *NetMessage) ProtoReflect() protoreflect.Message {
	mi := &file_com_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetMessage.ProtoReflect.Descriptor instead.
func (*NetMessage) Descriptor() ([]byte, []int) {
	return file_com_proto_rawDescGZIP(), []int{2}
}

func (x *NetMessage) GetReqHead() *ReqHead {
	if x != nil {
		return x.ReqHead
	}
	return nil
}

func (x *NetMessage) GetAckHead() *AckHead {
	if x != nil {
		return x.AckHead
	}
	return nil
}

func (x *NetMessage) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *NetMessage) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *NetMessage) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

// ==== 旧版
// ComReq 和。 ComResp 可作为内部rpc协议
type ComReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SId       int32     `protobuf:"varint,1,opt,name=s_id,json=sId,proto3" json:"s_id,omitempty"`                                         //服务ID
	ProtocNum ProtocNum `protobuf:"varint,2,opt,name=protoc_num,json=protocNum,proto3,enum=common.ProtocNum" json:"protoc_num,omitempty"` //定义的协议号码
	Data      []byte    `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`                                                   //请求数据
}

func (x *ComReq) Reset() {
	*x = ComReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComReq) ProtoMessage() {}

func (x *ComReq) ProtoReflect() protoreflect.Message {
	mi := &file_com_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComReq.ProtoReflect.Descriptor instead.
func (*ComReq) Descriptor() ([]byte, []int) {
	return file_com_proto_rawDescGZIP(), []int{3}
}

func (x *ComReq) GetSId() int32 {
	if x != nil {
		return x.SId
	}
	return 0
}

func (x *ComReq) GetProtocNum() ProtocNum {
	if x != nil {
		return x.ProtocNum
	}
	return ProtocNum_RPN
}

func (x *ComReq) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ComResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg       string    `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`                                                     //返回提示
	Code      int32     `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`                                                  //返回的code
	Data      []byte    `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`                                                   //返回的数据
	ProtocNum ProtocNum `protobuf:"varint,4,opt,name=protoc_num,json=protocNum,proto3,enum=common.ProtocNum" json:"protoc_num,omitempty"` //定义的协议号码
}

func (x *ComResp) Reset() {
	*x = ComResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComResp) ProtoMessage() {}

func (x *ComResp) ProtoReflect() protoreflect.Message {
	mi := &file_com_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComResp.ProtoReflect.Descriptor instead.
func (*ComResp) Descriptor() ([]byte, []int) {
	return file_com_proto_rawDescGZIP(), []int{4}
}

func (x *ComResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ComResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ComResp) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ComResp) GetProtocNum() ProtocNum {
	if x != nil {
		return x.ProtocNum
	}
	return ProtocNum_RPN
}

type Test1Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户Id
}

func (x *Test1Req) Reset() {
	*x = Test1Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test1Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test1Req) ProtoMessage() {}

func (x *Test1Req) ProtoReflect() protoreflect.Message {
	mi := &file_com_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test1Req.ProtoReflect.Descriptor instead.
func (*Test1Req) Descriptor() ([]byte, []int) {
	return file_com_proto_rawDescGZIP(), []int{5}
}

func (x *Test1Req) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type Test1Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户Id
}

func (x *Test1Ack) Reset() {
	*x = Test1Ack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test1Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test1Ack) ProtoMessage() {}

func (x *Test1Ack) ProtoReflect() protoreflect.Message {
	mi := &file_com_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test1Ack.ProtoReflect.Descriptor instead.
func (*Test1Ack) Descriptor() ([]byte, []int) {
	return file_com_proto_rawDescGZIP(), []int{6}
}

func (x *Test1Ack) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type Test2Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户Id
}

func (x *Test2Req) Reset() {
	*x = Test2Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test2Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test2Req) ProtoMessage() {}

func (x *Test2Req) ProtoReflect() protoreflect.Message {
	mi := &file_com_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test2Req.ProtoReflect.Descriptor instead.
func (*Test2Req) Descriptor() ([]byte, []int) {
	return file_com_proto_rawDescGZIP(), []int{7}
}

func (x *Test2Req) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type Test2Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户Id
}

func (x *Test2Ack) Reset() {
	*x = Test2Ack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test2Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test2Ack) ProtoMessage() {}

func (x *Test2Ack) ProtoReflect() protoreflect.Message {
	mi := &file_com_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test2Ack.ProtoReflect.Descriptor instead.
func (*Test2Ack) Descriptor() ([]byte, []int) {
	return file_com_proto_rawDescGZIP(), []int{8}
}

func (x *Test2Ack) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

var File_com_proto protoreflect.FileDescriptor

var file_com_proto_rawDesc = []byte{
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x22, 0x4e, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x22, 0x58, 0x0a, 0x08, 0x61, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb6, 0x01,
	0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x08,
	0x72, 0x65, 0x71, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x71, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x52, 0x07, 0x72, 0x65, 0x71, 0x48, 0x65, 0x61, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x61, 0x63, 0x6b,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x52, 0x07, 0x61,
	0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x61, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x52, 0x65, 0x71,
	0x12, 0x11, 0x0a, 0x04, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x73, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x4e, 0x75, 0x6d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x75, 0x0a, 0x07, 0x43, 0x6f, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x4e, 0x75, 0x6d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x4e, 0x75, 0x6d,
	0x22, 0x23, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x74, 0x31, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x23, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x74, 0x31, 0x41, 0x63,
	0x6b, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x23, 0x0a, 0x08, 0x74, 0x65,
	0x73, 0x74, 0x32, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x23, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x74, 0x32, 0x41, 0x63, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x2a, 0xec, 0x0e, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x65,
	0x62, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0xc8, 0x01, 0x12, 0x10,
	0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x10, 0xe8, 0x07,
	0x12, 0x15, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6c, 0x6c,
	0x65, 0x67, 0x61, 0x6c, 0x10, 0xe9, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x55, 0x6e, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x10, 0xea, 0x07,
	0x12, 0x11, 0x0a, 0x0c, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x10, 0xeb, 0x07, 0x12, 0x10, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0xec, 0x07, 0x12, 0x0c, 0x0a, 0x07, 0x4e, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x10, 0xed, 0x07, 0x12, 0x12, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x64, 0x64, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0xee, 0x07, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xef, 0x07, 0x12, 0x14,
	0x0a, 0x0f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0xf0, 0x07, 0x12, 0x15, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0xf1, 0x07, 0x12, 0x14, 0x0a, 0x0f, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0xf2,
	0x07, 0x12, 0x18, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xf3, 0x07, 0x12, 0x0c, 0x0a, 0x07, 0x53,
	0x79, 0x73, 0x42, 0x75, 0x73, 0x79, 0x10, 0xf4, 0x07, 0x12, 0x10, 0x0a, 0x0b, 0x4d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x10, 0xf5, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67,
	0x68, 0x10, 0xf6, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x10, 0xf7, 0x07, 0x12, 0x0b, 0x0a,
	0x06, 0x42, 0x65, 0x74, 0x4c, 0x6f, 0x77, 0x10, 0xf9, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x4e, 0x6f,
	0x52, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0xfa, 0x07, 0x12,
	0x0c, 0x0a, 0x07, 0x52, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x10, 0xfc, 0x07, 0x12, 0x1d, 0x0a,
	0x18, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x10, 0xfd, 0x07, 0x12, 0x14, 0x0a, 0x0f,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0xfe, 0x07, 0x12, 0x15, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x64, 0x69,
	0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xff, 0x07, 0x12, 0x10, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x45, 0x72, 0x72, 0x10, 0x80, 0x08, 0x12, 0x16, 0x0a, 0x11, 0x44,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x10, 0x81, 0x08, 0x12, 0x15, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x45, 0x72, 0x72, 0x10, 0x82, 0x08, 0x12, 0x13, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x54, 0x75, 0x72, 0x6e, 0x45, 0x72, 0x72, 0x10, 0x83, 0x08, 0x12,
	0x12, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x10, 0x84, 0x08, 0x12, 0x17, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x85, 0x08, 0x12, 0x11, 0x0a, 0x0c,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x67, 0x10, 0x86, 0x08, 0x12,
	0x14, 0x0a, 0x0f, 0x4e, 0x6f, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x10, 0x87, 0x08, 0x12, 0x16, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x10, 0x88, 0x08, 0x12, 0x0a, 0x0a,
	0x05, 0x44, 0x42, 0x45, 0x72, 0x72, 0x10, 0x89, 0x08, 0x12, 0x0f, 0x0a, 0x0a, 0x4e, 0x6f, 0x54,
	0x46, 0x69, 0x73, 0x68, 0x52, 0x6f, 0x64, 0x10, 0x8a, 0x08, 0x12, 0x0a, 0x0a, 0x05, 0x4c, 0x43,
	0x6f, 0x69, 0x6e, 0x10, 0x8b, 0x08, 0x12, 0x0a, 0x0a, 0x05, 0x53, 0x43, 0x6f, 0x69, 0x6e, 0x10,
	0x8c, 0x08, 0x12, 0x20, 0x0a, 0x1b, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x73, 0x68, 0x52, 0x6f, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x8d, 0x08, 0x12, 0x13, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0x8e, 0x08, 0x12, 0x11, 0x0a, 0x0c, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x10, 0x8f, 0x08, 0x12, 0x18, 0x0a, 0x13,
	0x46, 0x69, 0x73, 0x68, 0x52, 0x6f, 0x64, 0x4e, 0x75, 0x6d, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f,
	0x75, 0x67, 0x68, 0x10, 0x90, 0x08, 0x12, 0x13, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x65, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x10, 0x91, 0x08, 0x12, 0x0d, 0x0a, 0x08, 0x53,
	0x69, 0x67, 0x6e, 0x49, 0x6e, 0x45, 0x64, 0x10, 0x92, 0x08, 0x12, 0x11, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x44, 0x42, 0x44, 0x61, 0x74, 0x61, 0x45, 0x72, 0x72, 0x10, 0x93, 0x08, 0x12, 0x14, 0x0a,
	0x0f, 0x46, 0x69, 0x73, 0x68, 0x53, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x45, 0x72, 0x72,
	0x10, 0x94, 0x08, 0x12, 0x1a, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x6e, 0x61, 0x70, 0x73,
	0x61, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x95, 0x08, 0x12,
	0x1e, 0x0a, 0x19, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x6e, 0x61, 0x70, 0x73, 0x61, 0x63, 0x6b, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x96, 0x08, 0x12,
	0x18, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x6e, 0x61, 0x70, 0x73, 0x61, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x10, 0x97, 0x08, 0x12, 0x13, 0x0a, 0x0e, 0x52, 0x70, 0x63,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x45, 0x72, 0x72, 0x10, 0x98, 0x08, 0x12, 0x17,
	0x0a, 0x12, 0x52, 0x70, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x72, 0x72, 0x10, 0x99, 0x08, 0x12, 0x15, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x4e, 0x75, 0x6d, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0x9a, 0x08, 0x12, 0x14,
	0x0a, 0x0f, 0x44, 0x62, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x45, 0x72,
	0x72, 0x10, 0x9b, 0x08, 0x12, 0x17, 0x0a, 0x12, 0x52, 0x6f, 0x6f, 0x6d, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0x9c, 0x08, 0x12, 0x16, 0x0a,
	0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x9d, 0x08, 0x12, 0x15, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x9e, 0x08, 0x12, 0x15, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x62, 0x45, 0x72, 0x72,
	0x10, 0x9f, 0x08, 0x12, 0x15, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72,
	0x6f, 0x6d, 0x44, 0x62, 0x45, 0x72, 0x72, 0x10, 0xa0, 0x08, 0x12, 0x14, 0x0a, 0x0f, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x10, 0xa1, 0x08,
	0x12, 0x16, 0x0a, 0x11, 0x4b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x6f, 0x74, 0x45,
	0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0xa2, 0x08, 0x12, 0x1a, 0x0a, 0x15, 0x55, 0x6e, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x10, 0xa3, 0x08, 0x12, 0x15, 0x0a, 0x10, 0x48, 0x61, 0x76, 0x65, 0x42, 0x65, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x10, 0xa4, 0x08, 0x12, 0x15, 0x0a, 0x10, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x10,
	0xa5, 0x08, 0x12, 0x16, 0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xa6, 0x08, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x65,
	0x6c, 0x6c, 0x4f, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x4e, 0x6f, 0x74, 0x30, 0x10, 0xa7, 0x08, 0x12,
	0x19, 0x0a, 0x14, 0x50, 0x72, 0x65, 0x76, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x10, 0xa8, 0x08, 0x12, 0x16, 0x0a, 0x11, 0x4e, 0x6f,
	0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x59, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x6c, 0x66, 0x10,
	0xa9, 0x08, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x10, 0xaa, 0x08, 0x12, 0x11, 0x0a, 0x0c, 0x42,
	0x75, 0x79, 0x52, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x45, 0x72, 0x72, 0x10, 0xab, 0x08, 0x12, 0x14,
	0x0a, 0x0f, 0x42, 0x75, 0x79, 0x52, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x10, 0xbb, 0x08, 0x12, 0x17, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x47, 0x61,
	0x69, 0x6e, 0x52, 0x61, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0xbc, 0x08, 0x12, 0x16, 0x0a,
	0x11, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x10, 0xbf, 0x08, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x67, 0x10, 0xc0, 0x08, 0x12,
	0x17, 0x0a, 0x12, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x65, 0x72, 0x4f, 0x72, 0x65, 0x10, 0xc1, 0x08, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x6f, 0x69, 0x6e,
	0x42, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0xc3, 0x08, 0x12,
	0x17, 0x0a, 0x12, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x50, 0x65,
	0x72, 0x4b, 0x69, 0x6e, 0x67, 0x10, 0xc4, 0x08, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x6f, 0x69, 0x6e,
	0x42, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x50, 0x65, 0x72, 0x4f, 0x72, 0x65, 0x10, 0xc5, 0x08,
	0x12, 0x0d, 0x0a, 0x08, 0x4e, 0x4f, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0xc7, 0x08, 0x12,
	0x11, 0x0a, 0x0c, 0x4e, 0x4f, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x6f, 0x6e, 0x65, 0x10,
	0xc8, 0x08, 0x12, 0x16, 0x0a, 0x11, 0x4f, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0xc9, 0x08, 0x12, 0x12, 0x0a, 0x0d, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x67, 0x10, 0xcb, 0x08, 0x12, 0x16,
	0x0a, 0x11, 0x43, 0x72, 0x61, 0x7a, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x75, 0x74, 0x6f,
	0x42, 0x65, 0x74, 0x10, 0xd7, 0x08, 0x12, 0x15, 0x0a, 0x10, 0x4e, 0x6f, 0x74, 0x43, 0x72, 0x61,
	0x7a, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x65, 0x74, 0x10, 0xd8, 0x08, 0x12, 0x11, 0x0a,
	0x0c, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0xd9, 0x08,
	0x12, 0x15, 0x0a, 0x10, 0x48, 0x61, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x6f, 0x6c, 0x64,
	0x69, 0x65, 0x72, 0x73, 0x10, 0xda, 0x08, 0x12, 0x15, 0x0a, 0x10, 0x41, 0x6c, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x53, 0x65, 0x74, 0x49, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x10, 0xdb, 0x08, 0x12, 0x10,
	0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x10, 0xdc, 0x08,
	0x12, 0x11, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x35,
	0x10, 0xf2, 0x08, 0x2a, 0x14, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x4e, 0x75, 0x6d,
	0x12, 0x07, 0x0a, 0x03, 0x52, 0x50, 0x4e, 0x10, 0x00, 0x42, 0x06, 0x5a, 0x04, 0x2f, 0x70, 0x62,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_proto_rawDescOnce sync.Once
	file_com_proto_rawDescData = file_com_proto_rawDesc
)

func file_com_proto_rawDescGZIP() []byte {
	file_com_proto_rawDescOnce.Do(func() {
		file_com_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_proto_rawDescData)
	})
	return file_com_proto_rawDescData
}

var file_com_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_com_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_com_proto_goTypes = []interface{}{
	(Code)(0),          // 0: common.Code
	(ProtocNum)(0),     // 1: common.ProtocNum
	(*ReqHead)(nil),    // 2: common.req_head
	(*AckHead)(nil),    // 3: common.ack_head
	(*NetMessage)(nil), // 4: common.netMessage
	(*ComReq)(nil),     // 5: common.ComReq
	(*ComResp)(nil),    // 6: common.ComResp
	(*Test1Req)(nil),   // 7: common.test1Req
	(*Test1Ack)(nil),   // 8: common.test1Ack
	(*Test2Req)(nil),   // 9: common.test2Req
	(*Test2Ack)(nil),   // 10: common.test2Ack
}
var file_com_proto_depIdxs = []int32{
	0, // 0: common.ack_head.code:type_name -> common.Code
	2, // 1: common.netMessage.req_head:type_name -> common.req_head
	3, // 2: common.netMessage.ack_head:type_name -> common.ack_head
	1, // 3: common.ComReq.protoc_num:type_name -> common.ProtocNum
	1, // 4: common.ComResp.protoc_num:type_name -> common.ProtocNum
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_com_proto_init() }
func file_com_proto_init() {
	if File_com_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_com_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test1Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test1Ack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test2Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test2Ack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_proto_goTypes,
		DependencyIndexes: file_com_proto_depIdxs,
		EnumInfos:         file_com_proto_enumTypes,
		MessageInfos:      file_com_proto_msgTypes,
	}.Build()
	File_com_proto = out.File
	file_com_proto_rawDesc = nil
	file_com_proto_goTypes = nil
	file_com_proto_depIdxs = nil
}
