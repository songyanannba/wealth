// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.29.3
// source: meme_battle.proto

package pbs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Meb int32

const (
	Meb_mt0 Meb = 0
	// 心跳
	Meb_mtHeartReq Meb = 398
	Meb_mtHeartAck Meb = 399
	Meb_mtHeart    Meb = 400
	// 创建房间
	Meb_createRoom    Meb = 1001
	Meb_createRoomAck Meb = 1002
	// 加入房间
	Meb_joinRoom    Meb = 1003
	Meb_joinRoomAck Meb = 1004
	// 离开房间
	Meb_leaveRoom    Meb = 1005
	Meb_leaveRoomAck Meb = 1006
	// 获取用户状态
	Meb_userState    Meb = 1007
	Meb_userStateAck Meb = 1008
	// 加入房间
	Meb_reJoinRoom    Meb = 1009
	Meb_reJoinRoomAck Meb = 1010
	// 房间心跳
	Meb_roomAlive    Meb = 1011
	Meb_roomAliveAck Meb = 1012
	// 踢人
	Meb_kickRoom    Meb = 1013
	Meb_kickRoomAck Meb = 1014
	// 邀请好友
	Meb_inviteFriend    Meb = 1015
	Meb_inviteFriendAck Meb = 1016
	// 开始游戏
	Meb_startPlay    Meb = 1017
	Meb_startPlayAck Meb = 1018
	// 加载完成
	Meb_loadCompleted    Meb = 1019
	Meb_loadCompletedAck Meb = 1020
	// 问题广播
	Meb_issueMsg Meb = 1021
	// 发牌
	Meb_dealCardsMsg Meb = 1022
	// 操作牌
	Meb_operateCards Meb = 1023
	// 看牌广播
	Meb_lookCards Meb = 1024
	// 表情
	Meb_opeEmoji Meb = 1025
	// 出牌
	Meb_outCards Meb = 1026
	// 重置牌（重随）
	Meb_reMakeCards Meb = 1027
	// 进入点赞页面
	Meb_entryLikePage Meb = 1028
	// 点赞
	Meb_likeCards Meb = 1029
	// 本局结束 计算本局最终结果
	Meb_calculateRank Meb = 1030
	// 游戏结束
	Meb_memeBattleOver Meb = 1031
	// 匹配
	Meb_memeMatchRoom Meb = 1032
	// 取消匹配 mebCancel
	Meb_cancelMatchRoom Meb = 1033
	// 匹配成功 并开始
	Meb_matchStart Meb = 1034
	// 就绪
	Meb_readyMsg Meb = 1035
	// 图鉴列表
	Meb_handbookList     Meb = 1036
	Meb_handbookListResp Meb = 1043
	// 拆包
	Meb_unpackCard     Meb = 1037
	Meb_unpackCardResp Meb = 1045
	// 版本列表
	Meb_cardVersionList     Meb = 1038
	Meb_cardVersionListResp Meb = 1044
	// 好友列表
	Meb_friendUserList     Meb = 1039
	Meb_friendUserListResp Meb = 1040
	// 申请好友列表
	Meb_auditUserList     Meb = 1041
	Meb_auditUserListResp Meb = 1042
	// 添加朋友
	Meb_addFriend     Meb = 1046
	Meb_addFriendResp Meb = 1047
	// 审核朋友
	Meb_authFriend     Meb = 1048
	Meb_authFriendResp Meb = 1049
	// 删除朋友
	Meb_delFriend     Meb = 1050
	Meb_delFriendResp Meb = 1051
	// 用户资料
	Meb_userDetail     Meb = 1052
	Meb_userDetailResp Meb = 1053
	// 就绪
	Meb_cancelReady        Meb = 1054
	Meb_cancelReadyMsg     Meb = 1055
	Meb_coinExperience     Meb = 1056
	Meb_coinExperienceResp Meb = 1057
)

// Enum value maps for Meb.
var (
	Meb_name = map[int32]string{
		0:    "mt0",
		398:  "mtHeartReq",
		399:  "mtHeartAck",
		400:  "mtHeart",
		1001: "createRoom",
		1002: "createRoomAck",
		1003: "joinRoom",
		1004: "joinRoomAck",
		1005: "leaveRoom",
		1006: "leaveRoomAck",
		1007: "userState",
		1008: "userStateAck",
		1009: "reJoinRoom",
		1010: "reJoinRoomAck",
		1011: "roomAlive",
		1012: "roomAliveAck",
		1013: "kickRoom",
		1014: "kickRoomAck",
		1015: "inviteFriend",
		1016: "inviteFriendAck",
		1017: "startPlay",
		1018: "startPlayAck",
		1019: "loadCompleted",
		1020: "loadCompletedAck",
		1021: "issueMsg",
		1022: "dealCardsMsg",
		1023: "operateCards",
		1024: "lookCards",
		1025: "opeEmoji",
		1026: "outCards",
		1027: "reMakeCards",
		1028: "entryLikePage",
		1029: "likeCards",
		1030: "calculateRank",
		1031: "memeBattleOver",
		1032: "memeMatchRoom",
		1033: "cancelMatchRoom",
		1034: "matchStart",
		1035: "readyMsg",
		1036: "handbookList",
		1043: "handbookListResp",
		1037: "unpackCard",
		1045: "unpackCardResp",
		1038: "cardVersionList",
		1044: "cardVersionListResp",
		1039: "friendUserList",
		1040: "friendUserListResp",
		1041: "auditUserList",
		1042: "auditUserListResp",
		1046: "addFriend",
		1047: "addFriendResp",
		1048: "authFriend",
		1049: "authFriendResp",
		1050: "delFriend",
		1051: "delFriendResp",
		1052: "userDetail",
		1053: "userDetailResp",
		1054: "cancelReady",
		1055: "cancelReadyMsg",
		1056: "coinExperience",
		1057: "coinExperienceResp",
	}
	Meb_value = map[string]int32{
		"mt0":                 0,
		"mtHeartReq":          398,
		"mtHeartAck":          399,
		"mtHeart":             400,
		"createRoom":          1001,
		"createRoomAck":       1002,
		"joinRoom":            1003,
		"joinRoomAck":         1004,
		"leaveRoom":           1005,
		"leaveRoomAck":        1006,
		"userState":           1007,
		"userStateAck":        1008,
		"reJoinRoom":          1009,
		"reJoinRoomAck":       1010,
		"roomAlive":           1011,
		"roomAliveAck":        1012,
		"kickRoom":            1013,
		"kickRoomAck":         1014,
		"inviteFriend":        1015,
		"inviteFriendAck":     1016,
		"startPlay":           1017,
		"startPlayAck":        1018,
		"loadCompleted":       1019,
		"loadCompletedAck":    1020,
		"issueMsg":            1021,
		"dealCardsMsg":        1022,
		"operateCards":        1023,
		"lookCards":           1024,
		"opeEmoji":            1025,
		"outCards":            1026,
		"reMakeCards":         1027,
		"entryLikePage":       1028,
		"likeCards":           1029,
		"calculateRank":       1030,
		"memeBattleOver":      1031,
		"memeMatchRoom":       1032,
		"cancelMatchRoom":     1033,
		"matchStart":          1034,
		"readyMsg":            1035,
		"handbookList":        1036,
		"handbookListResp":    1043,
		"unpackCard":          1037,
		"unpackCardResp":      1045,
		"cardVersionList":     1038,
		"cardVersionListResp": 1044,
		"friendUserList":      1039,
		"friendUserListResp":  1040,
		"auditUserList":       1041,
		"auditUserListResp":   1042,
		"addFriend":           1046,
		"addFriendResp":       1047,
		"authFriend":          1048,
		"authFriendResp":      1049,
		"delFriend":           1050,
		"delFriendResp":       1051,
		"userDetail":          1052,
		"userDetailResp":      1053,
		"cancelReady":         1054,
		"cancelReadyMsg":      1055,
		"coinExperience":      1056,
		"coinExperienceResp":  1057,
	}
)

func (x Meb) Enum() *Meb {
	p := new(Meb)
	*p = x
	return p
}

func (x Meb) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Meb) Descriptor() protoreflect.EnumDescriptor {
	return file_meme_battle_proto_enumTypes[0].Descriptor()
}

func (Meb) Type() protoreflect.EnumType {
	return &file_meme_battle_proto_enumTypes[0]
}

func (x Meb) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Meb.Descriptor instead.
func (Meb) EnumDescriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{0}
}

// 创建房间
type CreateRoomReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                      //
	RoomType     int32  `protobuf:"varint,2,opt,name=room_type,json=roomType,proto3" json:"room_type,omitempty"`               // 1:好友约战
	UserNumLimit int32  `protobuf:"varint,3,opt,name=user_num_limit,json=userNumLimit,proto3" json:"user_num_limit,omitempty"` //用户人数限制 2人场 3 人场 4人场
	RoomTurnNum  int32  `protobuf:"varint,4,opt,name=room_turn_num,json=roomTurnNum,proto3" json:"room_turn_num,omitempty"`    //房间 回合数 3/5/7
}

func (x *CreateRoomReq) Reset() {
	*x = CreateRoomReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoomReq) ProtoMessage() {}

func (x *CreateRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoomReq.ProtoReflect.Descriptor instead.
func (*CreateRoomReq) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{0}
}

func (x *CreateRoomReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateRoomReq) GetRoomType() int32 {
	if x != nil {
		return x.RoomType
	}
	return 0
}

func (x *CreateRoomReq) GetUserNumLimit() int32 {
	if x != nil {
		return x.UserNumLimit
	}
	return 0
}

func (x *CreateRoomReq) GetRoomTurnNum() int32 {
	if x != nil {
		return x.RoomTurnNum
	}
	return 0
}

// 加入房间
type JoinRoomReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //
	RoomNo string `protobuf:"bytes,2,opt,name=room_no,json=roomNo,proto3" json:"room_no,omitempty"` // 1:房间编号
}

func (x *JoinRoomReq) Reset() {
	*x = JoinRoomReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRoomReq) ProtoMessage() {}

func (x *JoinRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRoomReq.ProtoReflect.Descriptor instead.
func (*JoinRoomReq) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{1}
}

func (x *JoinRoomReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JoinRoomReq) GetRoomNo() string {
	if x != nil {
		return x.RoomNo
	}
	return ""
}

// 重新加入房间
type ReJoinRoomReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //
	RoomNo string `protobuf:"bytes,2,opt,name=room_no,json=roomNo,proto3" json:"room_no,omitempty"` // 1:房间编号
}

func (x *ReJoinRoomReq) Reset() {
	*x = ReJoinRoomReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReJoinRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReJoinRoomReq) ProtoMessage() {}

func (x *ReJoinRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReJoinRoomReq.ProtoReflect.Descriptor instead.
func (*ReJoinRoomReq) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{2}
}

func (x *ReJoinRoomReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ReJoinRoomReq) GetRoomNo() string {
	if x != nil {
		return x.RoomNo
	}
	return ""
}

// 离开房间
type LeaveRoomReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //
	RoomNo string `protobuf:"bytes,2,opt,name=room_no,json=roomNo,proto3" json:"room_no,omitempty"` // 1:房间编号
}

func (x *LeaveRoomReq) Reset() {
	*x = LeaveRoomReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveRoomReq) ProtoMessage() {}

func (x *LeaveRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveRoomReq.ProtoReflect.Descriptor instead.
func (*LeaveRoomReq) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{3}
}

func (x *LeaveRoomReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LeaveRoomReq) GetRoomNo() string {
	if x != nil {
		return x.RoomNo
	}
	return ""
}

type RoomAliveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //
	RoomNo string `protobuf:"bytes,2,opt,name=room_no,json=roomNo,proto3" json:"room_no,omitempty"` // 1:房间编号
}

func (x *RoomAliveReq) Reset() {
	*x = RoomAliveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomAliveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomAliveReq) ProtoMessage() {}

func (x *RoomAliveReq) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomAliveReq.ProtoReflect.Descriptor instead.
func (*RoomAliveReq) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{4}
}

func (x *RoomAliveReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RoomAliveReq) GetRoomNo() string {
	if x != nil {
		return x.RoomNo
	}
	return ""
}

type KickRoomReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`    //被踢之人的用户ID
	RoomNo  string `protobuf:"bytes,2,opt,name=room_no,json=roomNo,proto3" json:"room_no,omitempty"`    // 1:房间编号
	OwnerId string `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"` // 1:房主ID
}

func (x *KickRoomReq) Reset() {
	*x = KickRoomReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickRoomReq) ProtoMessage() {}

func (x *KickRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickRoomReq.ProtoReflect.Descriptor instead.
func (*KickRoomReq) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{5}
}

func (x *KickRoomReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *KickRoomReq) GetRoomNo() string {
	if x != nil {
		return x.RoomNo
	}
	return ""
}

func (x *KickRoomReq) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

type UserStateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RoomNo string `protobuf:"bytes,2,opt,name=room_no,json=roomNo,proto3" json:"room_no,omitempty"` // 1:房间编号
}

func (x *UserStateReq) Reset() {
	*x = UserStateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStateReq) ProtoMessage() {}

func (x *UserStateReq) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStateReq.ProtoReflect.Descriptor instead.
func (*UserStateReq) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{6}
}

func (x *UserStateReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserStateReq) GetRoomNo() string {
	if x != nil {
		return x.RoomNo
	}
	return ""
}

type InviteFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteUserId string `protobuf:"bytes,1,opt,name=invite_user_id,json=inviteUserId,proto3" json:"invite_user_id,omitempty"` //被邀请之人的用户ID
	RoomNo       string `protobuf:"bytes,2,opt,name=room_no,json=roomNo,proto3" json:"room_no,omitempty"`                     // 1:房间编号
	OwnerId      string `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`                  // 1:房主ID
}

func (x *InviteFriendReq) Reset() {
	*x = InviteFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteFriendReq) ProtoMessage() {}

func (x *InviteFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteFriendReq.ProtoReflect.Descriptor instead.
func (*InviteFriendReq) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{7}
}

func (x *InviteFriendReq) GetInviteUserId() string {
	if x != nil {
		return x.InviteUserId
	}
	return ""
}

func (x *InviteFriendReq) GetRoomNo() string {
	if x != nil {
		return x.RoomNo
	}
	return ""
}

func (x *InviteFriendReq) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

type StartPlayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RoomNo string `protobuf:"bytes,2,opt,name=room_no,json=roomNo,proto3" json:"room_no,omitempty"` // 1:房间编号
}

func (x *StartPlayReq) Reset() {
	*x = StartPlayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartPlayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartPlayReq) ProtoMessage() {}

func (x *StartPlayReq) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartPlayReq.ProtoReflect.Descriptor instead.
func (*StartPlayReq) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{8}
}

func (x *StartPlayReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *StartPlayReq) GetRoomNo() string {
	if x != nil {
		return x.RoomNo
	}
	return ""
}

type LoadCompletedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RoomNo string `protobuf:"bytes,2,opt,name=room_no,json=roomNo,proto3" json:"room_no,omitempty"` // 1:房间编号
}

func (x *LoadCompletedReq) Reset() {
	*x = LoadCompletedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadCompletedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadCompletedReq) ProtoMessage() {}

func (x *LoadCompletedReq) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadCompletedReq.ProtoReflect.Descriptor instead.
func (*LoadCompletedReq) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{9}
}

func (x *LoadCompletedReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LoadCompletedReq) GetRoomNo() string {
	if x != nil {
		return x.RoomNo
	}
	return ""
}

type OperateCardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string  `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RoomNo  string  `protobuf:"bytes,2,opt,name=room_no,json=roomNo,proto3" json:"room_no,omitempty"`     // 房间编号
	OpeType int32   `protobuf:"varint,3,opt,name=ope_type,json=opeType,proto3" json:"ope_type,omitempty"` // //0:看牌 1:出牌 2:表情 3:重随
	EmojiId string  `protobuf:"bytes,4,opt,name=emoji_id,json=emojiId,proto3" json:"emoji_id,omitempty"`  // emoji_id 表情ID
	Pitch   float32 `protobuf:"fixed32,5,opt,name=pitch,proto3" json:"pitch,omitempty"`
	Yaw     float32 `protobuf:"fixed32,6,opt,name=yaw,proto3" json:"yaw,omitempty"`
	Looking bool    `protobuf:"varint,7,opt,name=looking,proto3" json:"looking,omitempty"` //看牌传
	Card    []*Card `protobuf:"bytes,8,rep,name=Card,proto3" json:"Card,omitempty"`        //牌ID
}

func (x *OperateCardReq) Reset() {
	*x = OperateCardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperateCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperateCardReq) ProtoMessage() {}

func (x *OperateCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperateCardReq.ProtoReflect.Descriptor instead.
func (*OperateCardReq) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{10}
}

func (x *OperateCardReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OperateCardReq) GetRoomNo() string {
	if x != nil {
		return x.RoomNo
	}
	return ""
}

func (x *OperateCardReq) GetOpeType() int32 {
	if x != nil {
		return x.OpeType
	}
	return 0
}

func (x *OperateCardReq) GetEmojiId() string {
	if x != nil {
		return x.EmojiId
	}
	return ""
}

func (x *OperateCardReq) GetPitch() float32 {
	if x != nil {
		return x.Pitch
	}
	return 0
}

func (x *OperateCardReq) GetYaw() float32 {
	if x != nil {
		return x.Yaw
	}
	return 0
}

func (x *OperateCardReq) GetLooking() bool {
	if x != nil {
		return x.Looking
	}
	return false
}

func (x *OperateCardReq) GetCard() []*Card {
	if x != nil {
		return x.Card
	}
	return nil
}

type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId int32 `protobuf:"varint,1,opt,name=CardId,proto3" json:"CardId,omitempty"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{11}
}

func (x *Card) GetCardId() int32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

type LikeCardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string  `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RoomNo     string  `protobuf:"bytes,2,opt,name=room_no,json=roomNo,proto3" json:"room_no,omitempty"`               // 房间编号
	LikeUserId string  `protobuf:"bytes,3,opt,name=like_user_id,json=likeUserId,proto3" json:"like_user_id,omitempty"` //被点赞的用户ID
	Card       []*Card `protobuf:"bytes,4,rep,name=Card,proto3" json:"Card,omitempty"`                                 //牌ID
}

func (x *LikeCardReq) Reset() {
	*x = LikeCardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeCardReq) ProtoMessage() {}

func (x *LikeCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeCardReq.ProtoReflect.Descriptor instead.
func (*LikeCardReq) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{12}
}

func (x *LikeCardReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LikeCardReq) GetRoomNo() string {
	if x != nil {
		return x.RoomNo
	}
	return ""
}

func (x *LikeCardReq) GetLikeUserId() string {
	if x != nil {
		return x.LikeUserId
	}
	return ""
}

func (x *LikeCardReq) GetCard() []*Card {
	if x != nil {
		return x.Card
	}
	return nil
}

type MatchRoomReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomNo string `protobuf:"bytes,1,opt,name=room_no,json=roomNo,proto3" json:"room_no,omitempty"` // 房间编号
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *MatchRoomReq) Reset() {
	*x = MatchRoomReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRoomReq) ProtoMessage() {}

func (x *MatchRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRoomReq.ProtoReflect.Descriptor instead.
func (*MatchRoomReq) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{13}
}

func (x *MatchRoomReq) GetRoomNo() string {
	if x != nil {
		return x.RoomNo
	}
	return ""
}

func (x *MatchRoomReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ReadyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RoomNo string `protobuf:"bytes,2,opt,name=room_no,json=roomNo,proto3" json:"room_no,omitempty"` // 1:房间编号
}

func (x *ReadyReq) Reset() {
	*x = ReadyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadyReq) ProtoMessage() {}

func (x *ReadyReq) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadyReq.ProtoReflect.Descriptor instead.
func (*ReadyReq) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{14}
}

func (x *ReadyReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ReadyReq) GetRoomNo() string {
	if x != nil {
		return x.RoomNo
	}
	return ""
}

type CancelReadyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RoomNo string `protobuf:"bytes,2,opt,name=room_no,json=roomNo,proto3" json:"room_no,omitempty"` // 1:房间编号
}

func (x *CancelReadyReq) Reset() {
	*x = CancelReadyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelReadyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelReadyReq) ProtoMessage() {}

func (x *CancelReadyReq) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelReadyReq.ProtoReflect.Descriptor instead.
func (*CancelReadyReq) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{15}
}

func (x *CancelReadyReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CancelReadyReq) GetRoomNo() string {
	if x != nil {
		return x.RoomNo
	}
	return ""
}

type HandbookListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	LastId int32  `protobuf:"varint,2,opt,name=last_id,json=lastId,proto3" json:"last_id,omitempty"`
	Level  int32  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *HandbookListReq) Reset() {
	*x = HandbookListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandbookListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandbookListReq) ProtoMessage() {}

func (x *HandbookListReq) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandbookListReq.ProtoReflect.Descriptor instead.
func (*HandbookListReq) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{16}
}

func (x *HandbookListReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *HandbookListReq) GetLastId() int32 {
	if x != nil {
		return x.LastId
	}
	return 0
}

func (x *HandbookListReq) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type HandbookListAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHaveNextPage bool            `protobuf:"varint,1,opt,name=is_have_next_page,json=isHaveNextPage,proto3" json:"is_have_next_page,omitempty"`
	AllCartCount   int32           `protobuf:"varint,2,opt,name=all_cart_count,json=allCartCount,proto3" json:"all_cart_count,omitempty"`
	HandListCard   []*HandListCard `protobuf:"bytes,3,rep,name=hand_list_card,json=handListCard,proto3" json:"hand_list_card,omitempty"`
}

func (x *HandbookListAck) Reset() {
	*x = HandbookListAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandbookListAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandbookListAck) ProtoMessage() {}

func (x *HandbookListAck) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandbookListAck.ProtoReflect.Descriptor instead.
func (*HandbookListAck) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{17}
}

func (x *HandbookListAck) GetIsHaveNextPage() bool {
	if x != nil {
		return x.IsHaveNextPage
	}
	return false
}

func (x *HandbookListAck) GetAllCartCount() int32 {
	if x != nil {
		return x.AllCartCount
	}
	return 0
}

func (x *HandbookListAck) GetHandListCard() []*HandListCard {
	if x != nil {
		return x.HandListCard
	}
	return nil
}

type HandListCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId int32  `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Suffix string `protobuf:"bytes,3,opt,name=suffix,proto3" json:"suffix,omitempty"`
	IsOwn  bool   `protobuf:"varint,4,opt,name=is_own,json=isOwn,proto3" json:"is_own,omitempty"`
	Level  int32  `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *HandListCard) Reset() {
	*x = HandListCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandListCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandListCard) ProtoMessage() {}

func (x *HandListCard) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandListCard.ProtoReflect.Descriptor instead.
func (*HandListCard) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{18}
}

func (x *HandListCard) GetCardId() int32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *HandListCard) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HandListCard) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *HandListCard) GetIsOwn() bool {
	if x != nil {
		return x.IsOwn
	}
	return false
}

func (x *HandListCard) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type UnpackCardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Version int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Num     int32  `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *UnpackCardReq) Reset() {
	*x = UnpackCardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnpackCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnpackCardReq) ProtoMessage() {}

func (x *UnpackCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnpackCardReq.ProtoReflect.Descriptor instead.
func (*UnpackCardReq) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{19}
}

func (x *UnpackCardReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UnpackCardReq) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *UnpackCardReq) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type UnpackCardAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListCard []*HandListCardArr `protobuf:"bytes,1,rep,name=list_card,json=listCard,proto3" json:"list_card,omitempty"`
}

func (x *UnpackCardAck) Reset() {
	*x = UnpackCardAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnpackCardAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnpackCardAck) ProtoMessage() {}

func (x *UnpackCardAck) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnpackCardAck.ProtoReflect.Descriptor instead.
func (*UnpackCardAck) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{20}
}

func (x *UnpackCardAck) GetListCard() []*HandListCardArr {
	if x != nil {
		return x.ListCard
	}
	return nil
}

type HandListCardArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards []*HandListCard `protobuf:"bytes,1,rep,name=cards,proto3" json:"cards,omitempty"`
}

func (x *HandListCardArr) Reset() {
	*x = HandListCardArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandListCardArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandListCardArr) ProtoMessage() {}

func (x *HandListCardArr) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandListCardArr.ProtoReflect.Descriptor instead.
func (*HandListCardArr) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{21}
}

func (x *HandListCardArr) GetCards() []*HandListCard {
	if x != nil {
		return x.Cards
	}
	return nil
}

type CardVersionListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *CardVersionListReq) Reset() {
	*x = CardVersionListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardVersionListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardVersionListReq) ProtoMessage() {}

func (x *CardVersionListReq) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardVersionListReq.ProtoReflect.Descriptor instead.
func (*CardVersionListReq) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{22}
}

func (x *CardVersionListReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CardVersionListAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardVersionList []*CardVersionList `protobuf:"bytes,1,rep,name=card_version_list,json=cardVersionList,proto3" json:"card_version_list,omitempty"`
}

func (x *CardVersionListAck) Reset() {
	*x = CardVersionListAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardVersionListAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardVersionListAck) ProtoMessage() {}

func (x *CardVersionListAck) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardVersionListAck.ProtoReflect.Descriptor instead.
func (*CardVersionListAck) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{23}
}

func (x *CardVersionListAck) GetCardVersionList() []*CardVersionList {
	if x != nil {
		return x.CardVersionList
	}
	return nil
}

type CardVersionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *CardVersionList) Reset() {
	*x = CardVersionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardVersionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardVersionList) ProtoMessage() {}

func (x *CardVersionList) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardVersionList.ProtoReflect.Descriptor instead.
func (*CardVersionList) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{24}
}

func (x *CardVersionList) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type FriendListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	LastId int32  `protobuf:"varint,2,opt,name=last_id,json=lastId,proto3" json:"last_id,omitempty"`
}

func (x *FriendListReq) Reset() {
	*x = FriendListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendListReq) ProtoMessage() {}

func (x *FriendListReq) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendListReq.ProtoReflect.Descriptor instead.
func (*FriendListReq) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{25}
}

func (x *FriendListReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FriendListReq) GetLastId() int32 {
	if x != nil {
		return x.LastId
	}
	return 0
}

type FriendListAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHaveNextPage bool          `protobuf:"varint,1,opt,name=is_have_next_page,json=isHaveNextPage,proto3" json:"is_have_next_page,omitempty"`
	UserFriend     []*UserFriend `protobuf:"bytes,2,rep,name=user_friend,json=userFriend,proto3" json:"user_friend,omitempty"`
}

func (x *FriendListAck) Reset() {
	*x = FriendListAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendListAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendListAck) ProtoMessage() {}

func (x *FriendListAck) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendListAck.ProtoReflect.Descriptor instead.
func (*FriendListAck) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{26}
}

func (x *FriendListAck) GetIsHaveNextPage() bool {
	if x != nil {
		return x.IsHaveNextPage
	}
	return false
}

func (x *FriendListAck) GetUserFriend() []*UserFriend {
	if x != nil {
		return x.UserFriend
	}
	return nil
}

type AddFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuditUser       string `protobuf:"bytes,1,opt,name=audit_user,json=auditUser,proto3" json:"audit_user,omitempty"`
	ApplicationUser string `protobuf:"bytes,2,opt,name=application_user,json=applicationUser,proto3" json:"application_user,omitempty"`
}

func (x *AddFriendReq) Reset() {
	*x = AddFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFriendReq) ProtoMessage() {}

func (x *AddFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFriendReq.ProtoReflect.Descriptor instead.
func (*AddFriendReq) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{27}
}

func (x *AddFriendReq) GetAuditUser() string {
	if x != nil {
		return x.AuditUser
	}
	return ""
}

func (x *AddFriendReq) GetApplicationUser() string {
	if x != nil {
		return x.ApplicationUser
	}
	return ""
}

type AddFriendAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddFriendAck) Reset() {
	*x = AddFriendAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFriendAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFriendAck) ProtoMessage() {}

func (x *AddFriendAck) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFriendAck.ProtoReflect.Descriptor instead.
func (*AddFriendAck) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{28}
}

type UserFriend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendUserId string `protobuf:"bytes,1,opt,name=friend_user_id,json=friendUserId,proto3" json:"friend_user_id,omitempty"`
	Nickname     string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	FriendId     int32  `protobuf:"varint,3,opt,name=friend_id,json=friendId,proto3" json:"friend_id,omitempty"`
}

func (x *UserFriend) Reset() {
	*x = UserFriend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFriend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFriend) ProtoMessage() {}

func (x *UserFriend) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFriend.ProtoReflect.Descriptor instead.
func (*UserFriend) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{29}
}

func (x *UserFriend) GetFriendUserId() string {
	if x != nil {
		return x.FriendUserId
	}
	return ""
}

func (x *UserFriend) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserFriend) GetFriendId() int32 {
	if x != nil {
		return x.FriendId
	}
	return 0
}

type AuditUserListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	LastId int32  `protobuf:"varint,2,opt,name=last_id,json=lastId,proto3" json:"last_id,omitempty"`
}

func (x *AuditUserListReq) Reset() {
	*x = AuditUserListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditUserListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditUserListReq) ProtoMessage() {}

func (x *AuditUserListReq) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditUserListReq.ProtoReflect.Descriptor instead.
func (*AuditUserListReq) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{30}
}

func (x *AuditUserListReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AuditUserListReq) GetLastId() int32 {
	if x != nil {
		return x.LastId
	}
	return 0
}

type Example struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsActive *bool `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3,oneof" json:"is_active,omitempty"`
}

func (x *Example) Reset() {
	*x = Example{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Example) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Example) ProtoMessage() {}

func (x *Example) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Example.ProtoReflect.Descriptor instead.
func (*Example) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{31}
}

func (x *Example) GetIsActive() bool {
	if x != nil && x.IsActive != nil {
		return *x.IsActive
	}
	return false
}

type AuditUserAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHaveNextPage bool         `protobuf:"varint,1,opt,name=is_have_next_page,json=isHaveNextPage,proto3" json:"is_have_next_page,omitempty"`
	AuditUser      []*AuditUser `protobuf:"bytes,2,rep,name=audit_user,json=auditUser,proto3" json:"audit_user,omitempty"`
}

func (x *AuditUserAck) Reset() {
	*x = AuditUserAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditUserAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditUserAck) ProtoMessage() {}

func (x *AuditUserAck) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditUserAck.ProtoReflect.Descriptor instead.
func (*AuditUserAck) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{32}
}

func (x *AuditUserAck) GetIsHaveNextPage() bool {
	if x != nil {
		return x.IsHaveNextPage
	}
	return false
}

func (x *AuditUserAck) GetAuditUser() []*AuditUser {
	if x != nil {
		return x.AuditUser
	}
	return nil
}

type AuditUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationUser string `protobuf:"bytes,1,opt,name=application_user,json=applicationUser,proto3" json:"application_user,omitempty"`
	Nickname        string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	AuditId         int32  `protobuf:"varint,3,opt,name=audit_id,json=auditId,proto3" json:"audit_id,omitempty"`
}

func (x *AuditUser) Reset() {
	*x = AuditUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditUser) ProtoMessage() {}

func (x *AuditUser) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditUser.ProtoReflect.Descriptor instead.
func (*AuditUser) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{33}
}

func (x *AuditUser) GetApplicationUser() string {
	if x != nil {
		return x.ApplicationUser
	}
	return ""
}

func (x *AuditUser) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *AuditUser) GetAuditId() int32 {
	if x != nil {
		return x.AuditId
	}
	return 0
}

type AuthFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuditId int32  `protobuf:"varint,2,opt,name=audit_id,json=auditId,proto3" json:"audit_id,omitempty"`
}

func (x *AuthFriendReq) Reset() {
	*x = AuthFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthFriendReq) ProtoMessage() {}

func (x *AuthFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthFriendReq.ProtoReflect.Descriptor instead.
func (*AuthFriendReq) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{34}
}

func (x *AuthFriendReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AuthFriendReq) GetAuditId() int32 {
	if x != nil {
		return x.AuditId
	}
	return 0
}

type AuthFriendAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuthFriendAck) Reset() {
	*x = AuthFriendAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthFriendAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthFriendAck) ProtoMessage() {}

func (x *AuthFriendAck) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthFriendAck.ProtoReflect.Descriptor instead.
func (*AuthFriendAck) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{35}
}

type DelFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FriendId int32  `protobuf:"varint,2,opt,name=friend_id,json=friendId,proto3" json:"friend_id,omitempty"`
}

func (x *DelFriendReq) Reset() {
	*x = DelFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelFriendReq) ProtoMessage() {}

func (x *DelFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelFriendReq.ProtoReflect.Descriptor instead.
func (*DelFriendReq) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{36}
}

func (x *DelFriendReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DelFriendReq) GetFriendId() int32 {
	if x != nil {
		return x.FriendId
	}
	return 0
}

type DelFriendAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelFriendAck) Reset() {
	*x = DelFriendAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelFriendAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelFriendAck) ProtoMessage() {}

func (x *DelFriendAck) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelFriendAck.ProtoReflect.Descriptor instead.
func (*DelFriendAck) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{37}
}

type UserDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *UserDetailReq) Reset() {
	*x = UserDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDetailReq) ProtoMessage() {}

func (x *UserDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDetailReq.ProtoReflect.Descriptor instead.
func (*UserDetailReq) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{38}
}

func (x *UserDetailReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// 用户资料
type UserDetailAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (x *UserDetailAck) Reset() {
	*x = UserDetailAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDetailAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDetailAck) ProtoMessage() {}

func (x *UserDetailAck) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDetailAck.ProtoReflect.Descriptor instead.
func (*UserDetailAck) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{39}
}

func (x *UserDetailAck) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserDetailAck) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type CoinExperienceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *CoinExperienceReq) Reset() {
	*x = CoinExperienceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinExperienceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinExperienceReq) ProtoMessage() {}

func (x *CoinExperienceReq) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinExperienceReq.ProtoReflect.Descriptor instead.
func (*CoinExperienceReq) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{40}
}

func (x *CoinExperienceReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CoinExperienceAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinNum    float32 `protobuf:"fixed32,1,opt,name=coin_num,json=coinNum,proto3" json:"coin_num,omitempty"`
	Experience float32 `protobuf:"fixed32,2,opt,name=experience,proto3" json:"experience,omitempty"`
}

func (x *CoinExperienceAck) Reset() {
	*x = CoinExperienceAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meme_battle_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinExperienceAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinExperienceAck) ProtoMessage() {}

func (x *CoinExperienceAck) ProtoReflect() protoreflect.Message {
	mi := &file_meme_battle_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinExperienceAck.ProtoReflect.Descriptor instead.
func (*CoinExperienceAck) Descriptor() ([]byte, []int) {
	return file_meme_battle_proto_rawDescGZIP(), []int{41}
}

func (x *CoinExperienceAck) GetCoinNum() float32 {
	if x != nil {
		return x.CoinNum
	}
	return 0
}

func (x *CoinExperienceAck) GetExperience() float32 {
	if x != nil {
		return x.Experience
	}
	return 0
}

var File_meme_battle_proto protoreflect.FileDescriptor

var file_meme_battle_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x65, 0x6d, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x65, 0x6d, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x1a, 0x09, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x01, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x75, 0x72, 0x6e, 0x4e, 0x75, 0x6d, 0x22, 0x3f, 0x0a,
	0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x22, 0x41,
	0x0a, 0x0d, 0x72, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x4e,
	0x6f, 0x22, 0x40, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f,
	0x6d, 0x4e, 0x6f, 0x22, 0x40, 0x0a, 0x0c, 0x72, 0x6f, 0x6f, 0x6d, 0x41, 0x6c, 0x69, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x22, 0x5a, 0x0a, 0x0b, 0x6b, 0x69, 0x63, 0x6b, 0x52, 0x6f, 0x6f,
	0x6d, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x40, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f,
	0x6d, 0x4e, 0x6f, 0x22, 0x6b, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x40, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x4e, 0x6f, 0x22, 0x44, 0x0a, 0x10, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x22, 0xe1, 0x01, 0x0a, 0x0e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x69, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x70, 0x69, 0x74, 0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x79, 0x61, 0x77,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x79, 0x61, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x6c,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x6d, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x43, 0x61, 0x72, 0x64, 0x22, 0x1e, 0x0a, 0x04,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x88, 0x01, 0x0a,
	0x0b, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x12, 0x20,
	0x0a, 0x0c, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6d, 0x65, 0x6d, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x04, 0x43, 0x61, 0x72, 0x64, 0x22, 0x40, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x08, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x22, 0x42, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x22, 0x59, 0x0a, 0x0f, 0x48,
	0x61, 0x6e, 0x64, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xa3, 0x01, 0x0a, 0x0f, 0x48, 0x61, 0x6e, 0x64, 0x62,
	0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x73,
	0x5f, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x48, 0x61, 0x76, 0x65, 0x4e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x72,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61,
	0x6c, 0x6c, 0x43, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x68,
	0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x6d, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0c,
	0x68, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x22, 0x80, 0x01, 0x0a,
	0x0c, 0x48, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4f, 0x77, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22,
	0x54, 0x0a, 0x0d, 0x55, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x4a, 0x0a, 0x0d, 0x55, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x43,
	0x61, 0x72, 0x64, 0x41, 0x63, 0x6b, 0x12, 0x39, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x6d, 0x65,
	0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x41, 0x72, 0x72, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x22, 0x42, 0x0a, 0x0f, 0x48, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x41, 0x72, 0x72, 0x12, 0x2f, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x6d, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x22, 0x2d, 0x0a, 0x12, 0x43, 0x61, 0x72, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x12, 0x43, 0x61, 0x72, 0x64, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x6d, 0x65, 0x5f, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x0f, 0x63, 0x61, 0x72, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x0f, 0x43, 0x61, 0x72, 0x64, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x41, 0x0a, 0x0d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x61,
	0x73, 0x74, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x0d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x76, 0x65,
	0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x69, 0x73, 0x48, 0x61, 0x76, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x38, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x6d, 0x65, 0x5f, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x22, 0x58, 0x0a, 0x0c, 0x41, 0x64,
	0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x22, 0x0e, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x41, 0x63, 0x6b, 0x22, 0x6b, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49,
	0x64, 0x22, 0x44, 0x0a, 0x10, 0x41, 0x75, 0x64, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x07, 0x45, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x22, 0x70, 0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x63, 0x6b, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69,
	0x73, 0x48, 0x61, 0x76, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a,
	0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x6d, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x22, 0x6d, 0x0a, 0x09, 0x41, 0x75, 0x64, 0x69, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x61, 0x75, 0x64, 0x69, 0x74, 0x49, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x6b, 0x22, 0x44, 0x0a, 0x0c, 0x44, 0x65, 0x6c,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x22,
	0x0e, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x6b, 0x22,
	0x28, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x0d, 0x75, 0x73, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x41, 0x63, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4e, 0x0a,
	0x11, 0x63, 0x6f, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x41,
	0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x2a, 0xf9, 0x08,
	0x0a, 0x03, 0x6d, 0x65, 0x62, 0x12, 0x07, 0x0a, 0x03, 0x6d, 0x74, 0x30, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0a, 0x6d, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x10, 0x8e, 0x03, 0x12,
	0x0f, 0x0a, 0x0a, 0x6d, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x41, 0x63, 0x6b, 0x10, 0x8f, 0x03,
	0x12, 0x0c, 0x0a, 0x07, 0x6d, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x10, 0x90, 0x03, 0x12, 0x0f,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0xe9, 0x07, 0x12,
	0x12, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x63, 0x6b,
	0x10, 0xea, 0x07, 0x12, 0x0d, 0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x10,
	0xeb, 0x07, 0x12, 0x10, 0x0a, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x63,
	0x6b, 0x10, 0xec, 0x07, 0x12, 0x0e, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x6f, 0x6f,
	0x6d, 0x10, 0xed, 0x07, 0x12, 0x11, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x6f, 0x6f,
	0x6d, 0x41, 0x63, 0x6b, 0x10, 0xee, 0x07, 0x12, 0x0e, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x10, 0xef, 0x07, 0x12, 0x11, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x10, 0xf0, 0x07, 0x12, 0x0f, 0x0a, 0x0a, 0x72, 0x65,
	0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0xf1, 0x07, 0x12, 0x12, 0x0a, 0x0d, 0x72,
	0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x63, 0x6b, 0x10, 0xf2, 0x07, 0x12,
	0x0e, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x10, 0xf3, 0x07, 0x12,
	0x11, 0x0a, 0x0c, 0x72, 0x6f, 0x6f, 0x6d, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x41, 0x63, 0x6b, 0x10,
	0xf4, 0x07, 0x12, 0x0d, 0x0a, 0x08, 0x6b, 0x69, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0xf5,
	0x07, 0x12, 0x10, 0x0a, 0x0b, 0x6b, 0x69, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x63, 0x6b,
	0x10, 0xf6, 0x07, 0x12, 0x11, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x10, 0xf7, 0x07, 0x12, 0x14, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x6b, 0x10, 0xf8, 0x07, 0x12, 0x0e, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x10, 0xf9, 0x07, 0x12, 0x11, 0x0a, 0x0c,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x63, 0x6b, 0x10, 0xfa, 0x07, 0x12,
	0x12, 0x0a, 0x0d, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x10, 0xfb, 0x07, 0x12, 0x15, 0x0a, 0x10, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x41, 0x63, 0x6b, 0x10, 0xfc, 0x07, 0x12, 0x0d, 0x0a, 0x08, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x4d, 0x73, 0x67, 0x10, 0xfd, 0x07, 0x12, 0x11, 0x0a, 0x0c, 0x64, 0x65, 0x61,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x73, 0x4d, 0x73, 0x67, 0x10, 0xfe, 0x07, 0x12, 0x11, 0x0a, 0x0c,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x10, 0xff, 0x07, 0x12,
	0x0e, 0x0a, 0x09, 0x6c, 0x6f, 0x6f, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x73, 0x10, 0x80, 0x08, 0x12,
	0x0d, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x10, 0x81, 0x08, 0x12, 0x0d,
	0x0a, 0x08, 0x6f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x10, 0x82, 0x08, 0x12, 0x10, 0x0a,
	0x0b, 0x72, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x10, 0x83, 0x08, 0x12,
	0x12, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x69, 0x6b, 0x65, 0x50, 0x61, 0x67, 0x65,
	0x10, 0x84, 0x08, 0x12, 0x0e, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x10, 0x85, 0x08, 0x12, 0x12, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x6e, 0x6b, 0x10, 0x86, 0x08, 0x12, 0x13, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x65, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x10, 0x87, 0x08, 0x12, 0x12, 0x0a, 0x0d,
	0x6d, 0x65, 0x6d, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x88, 0x08,
	0x12, 0x14, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x6f, 0x6f, 0x6d, 0x10, 0x89, 0x08, 0x12, 0x0f, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x10, 0x8a, 0x08, 0x12, 0x0d, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x4d, 0x73, 0x67, 0x10, 0x8b, 0x08, 0x12, 0x11, 0x0a, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x62, 0x6f,
	0x6f, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x8c, 0x08, 0x12, 0x15, 0x0a, 0x10, 0x68, 0x61, 0x6e,
	0x64, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x10, 0x93, 0x08,
	0x12, 0x0f, 0x0a, 0x0a, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x10, 0x8d,
	0x08, 0x12, 0x13, 0x0a, 0x0e, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x10, 0x95, 0x08, 0x12, 0x14, 0x0a, 0x0f, 0x63, 0x61, 0x72, 0x64, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x8e, 0x08, 0x12, 0x18, 0x0a, 0x13,
	0x63, 0x61, 0x72, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x10, 0x94, 0x08, 0x12, 0x13, 0x0a, 0x0e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x8f, 0x08, 0x12, 0x17, 0x0a, 0x12, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x10, 0x90, 0x08, 0x12, 0x12, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x91, 0x08, 0x12, 0x16, 0x0a, 0x11, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x10, 0x92, 0x08,
	0x12, 0x0e, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x10, 0x96, 0x08,
	0x12, 0x12, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x10, 0x97, 0x08, 0x12, 0x0f, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x10, 0x98, 0x08, 0x12, 0x13, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x10, 0x99, 0x08, 0x12, 0x0e, 0x0a, 0x09, 0x64, 0x65,
	0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x10, 0x9a, 0x08, 0x12, 0x12, 0x0a, 0x0d, 0x64, 0x65,
	0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x10, 0x9b, 0x08, 0x12, 0x0f,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x10, 0x9c, 0x08, 0x12,
	0x13, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x10, 0x9d, 0x08, 0x12, 0x10, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x10, 0x9e, 0x08, 0x12, 0x13, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x4d, 0x73, 0x67, 0x10, 0x9f, 0x08, 0x12, 0x13, 0x0a, 0x0e, 0x63,
	0x6f, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x10, 0xa0, 0x08,
	0x12, 0x17, 0x0a, 0x12, 0x63, 0x6f, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x10, 0xa1, 0x08, 0x32, 0x4e, 0x0a, 0x11, 0x6d, 0x65, 0x6d,
	0x65, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x75, 0x6e,
	0x63, 0x12, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6e,
	0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2f, 0x70, 0x62,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_meme_battle_proto_rawDescOnce sync.Once
	file_meme_battle_proto_rawDescData = file_meme_battle_proto_rawDesc
)

func file_meme_battle_proto_rawDescGZIP() []byte {
	file_meme_battle_proto_rawDescOnce.Do(func() {
		file_meme_battle_proto_rawDescData = protoimpl.X.CompressGZIP(file_meme_battle_proto_rawDescData)
	})
	return file_meme_battle_proto_rawDescData
}

var file_meme_battle_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_meme_battle_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_meme_battle_proto_goTypes = []interface{}{
	(Meb)(0),                   // 0: meme_battle.meb
	(*CreateRoomReq)(nil),      // 1: meme_battle.createRoomReq
	(*JoinRoomReq)(nil),        // 2: meme_battle.joinRoomReq
	(*ReJoinRoomReq)(nil),      // 3: meme_battle.reJoinRoomReq
	(*LeaveRoomReq)(nil),       // 4: meme_battle.leaveRoomReq
	(*RoomAliveReq)(nil),       // 5: meme_battle.roomAliveReq
	(*KickRoomReq)(nil),        // 6: meme_battle.kickRoomReq
	(*UserStateReq)(nil),       // 7: meme_battle.userStateReq
	(*InviteFriendReq)(nil),    // 8: meme_battle.inviteFriendReq
	(*StartPlayReq)(nil),       // 9: meme_battle.startPlayReq
	(*LoadCompletedReq)(nil),   // 10: meme_battle.loadCompletedReq
	(*OperateCardReq)(nil),     // 11: meme_battle.OperateCardReq
	(*Card)(nil),               // 12: meme_battle.Card
	(*LikeCardReq)(nil),        // 13: meme_battle.LikeCardReq
	(*MatchRoomReq)(nil),       // 14: meme_battle.MatchRoomReq
	(*ReadyReq)(nil),           // 15: meme_battle.ReadyReq
	(*CancelReadyReq)(nil),     // 16: meme_battle.CancelReadyReq
	(*HandbookListReq)(nil),    // 17: meme_battle.HandbookListReq
	(*HandbookListAck)(nil),    // 18: meme_battle.HandbookListAck
	(*HandListCard)(nil),       // 19: meme_battle.HandListCard
	(*UnpackCardReq)(nil),      // 20: meme_battle.UnpackCardReq
	(*UnpackCardAck)(nil),      // 21: meme_battle.UnpackCardAck
	(*HandListCardArr)(nil),    // 22: meme_battle.HandListCardArr
	(*CardVersionListReq)(nil), // 23: meme_battle.CardVersionListReq
	(*CardVersionListAck)(nil), // 24: meme_battle.CardVersionListAck
	(*CardVersionList)(nil),    // 25: meme_battle.CardVersionList
	(*FriendListReq)(nil),      // 26: meme_battle.FriendListReq
	(*FriendListAck)(nil),      // 27: meme_battle.FriendListAck
	(*AddFriendReq)(nil),       // 28: meme_battle.AddFriendReq
	(*AddFriendAck)(nil),       // 29: meme_battle.AddFriendAck
	(*UserFriend)(nil),         // 30: meme_battle.UserFriend
	(*AuditUserListReq)(nil),   // 31: meme_battle.AuditUserListReq
	(*Example)(nil),            // 32: meme_battle.Example
	(*AuditUserAck)(nil),       // 33: meme_battle.AuditUserAck
	(*AuditUser)(nil),          // 34: meme_battle.AuditUser
	(*AuthFriendReq)(nil),      // 35: meme_battle.AuthFriendReq
	(*AuthFriendAck)(nil),      // 36: meme_battle.AuthFriendAck
	(*DelFriendReq)(nil),       // 37: meme_battle.DelFriendReq
	(*DelFriendAck)(nil),       // 38: meme_battle.DelFriendAck
	(*UserDetailReq)(nil),      // 39: meme_battle.userDetailReq
	(*UserDetailAck)(nil),      // 40: meme_battle.userDetailAck
	(*CoinExperienceReq)(nil),  // 41: meme_battle.coinExperienceReq
	(*CoinExperienceAck)(nil),  // 42: meme_battle.coinExperienceAck
	(*NetMessage)(nil),         // 43: common.netMessage
}
var file_meme_battle_proto_depIdxs = []int32{
	12, // 0: meme_battle.OperateCardReq.Card:type_name -> meme_battle.Card
	12, // 1: meme_battle.LikeCardReq.Card:type_name -> meme_battle.Card
	19, // 2: meme_battle.HandbookListAck.hand_list_card:type_name -> meme_battle.HandListCard
	22, // 3: meme_battle.UnpackCardAck.list_card:type_name -> meme_battle.HandListCardArr
	19, // 4: meme_battle.HandListCardArr.cards:type_name -> meme_battle.HandListCard
	25, // 5: meme_battle.CardVersionListAck.card_version_list:type_name -> meme_battle.CardVersionList
	30, // 6: meme_battle.FriendListAck.user_friend:type_name -> meme_battle.UserFriend
	34, // 7: meme_battle.AuditUserAck.audit_user:type_name -> meme_battle.AuditUser
	43, // 8: meme_battle.memeBattleService.comEntranceFunc:input_type -> common.netMessage
	43, // 9: meme_battle.memeBattleService.comEntranceFunc:output_type -> common.netMessage
	9,  // [9:10] is the sub-list for method output_type
	8,  // [8:9] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_meme_battle_proto_init() }
func file_meme_battle_proto_init() {
	if File_meme_battle_proto != nil {
		return
	}
	file_com_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_meme_battle_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRoomReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinRoomReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReJoinRoomReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveRoomReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomAliveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickRoomReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartPlayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadCompletedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperateCardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeCardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchRoomReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelReadyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandbookListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandbookListAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandListCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnpackCardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnpackCardAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandListCardArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardVersionListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardVersionListAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardVersionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendListAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFriendAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFriend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditUserListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Example); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditUserAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthFriendAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelFriendAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDetailAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinExperienceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meme_battle_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinExperienceAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_meme_battle_proto_msgTypes[31].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_meme_battle_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_meme_battle_proto_goTypes,
		DependencyIndexes: file_meme_battle_proto_depIdxs,
		EnumInfos:         file_meme_battle_proto_enumTypes,
		MessageInfos:      file_meme_battle_proto_msgTypes,
	}.Build()
	File_meme_battle_proto = out.File
	file_meme_battle_proto_rawDesc = nil
	file_meme_battle_proto_goTypes = nil
	file_meme_battle_proto_depIdxs = nil
}
